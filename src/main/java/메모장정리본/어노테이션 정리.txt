
@ 어노테이션 : 컴파일시 해당 클래스/함수/필드 에 (미리)정보 주입

@ServletComponentScan
    - 스프링 환경에서 서블릿을 단독적으로 사용할때 필요

@SpringBootApplication // ☆☆☆☆☆☆☆ 스프링부트 주입
    1. Uses Apachs Tomcat as the default embedded container 내장 아파치톰캣 설정/실행
        ip : 톰캣이 설피된 컴퓨터의 ip 주소
        port : 톰캣(소프트웨어) 식별번호
            프로젝트내 src -> main -> resources -> application.properties
                server.port = 1002
            * application.properties : 스프링 설정파일 ( MAP 컬렉션프레임워크 타입 )

        http://아이피주소:포트번호
            - HTTP 통신 규약을 이용한 톰캣에 요청

    2. including RestFul ( GET POST PUT DELETE )



    3. applications using Spring MVC ( Controller , view , model )
        - 컴포넌트 스캔 해서 빈(객체)를 스프링 컨테이너 등록 ( * 상위 패키지의 클래스는 스캔 불가 )
            - @Controller
            - @RestController
            - @Component
            - 등등



    - 스프링 실행 방법
    public static void main(String[] args) {
            SpringApplication.run( 현재클래스명.class );
        }

Spring MVC
    1. @Controller
        - 컨트롤러 역할 : model 와 view 사이의 통신/중계 역할
            - 컨트롤러가 view 에게 데이터(model) 또는 ghkaus(view) 응답할수 있다
                - 서버 사이드 렌더링 : 서버가 화면을 구성해준다
        - 스프링 MVC 아키텍처로 구성된 스프링컨테이너(객체저장소)에 컨트롤러객체(빈) 를 등록
            - 왜??? 요청이 들어왔을때 해당 요청에 클래스들을 찾을려고

    2. @RestController
            - @Controller + @ResponseBody 포함
            - 컨트롤러가 view에게 데이터(model) 만 응답
                - 클라이언트 사이드 렌더링 : 클라이언트가 화면을 구성한다 [ 최초 화면 제외 ]

        * HTTP 요청 매핑
            - 1. @RequestMapping( value = "URL" , method = RequestMethod.메소드방식 )
                    GET : @RequestMapping( value = "URL" , method = RequestMethod.GET )
                    POST : @RequestMapping( value = "URL" , method = RequestMethod.POST )
                    PUT : @RequestMapping( value = "URL" , method = RequestMethod.PUT )
                    DELETE : @RequestMapping( value = "URL" , method = RequestMethod.DELETE )
                    - 주로 : 컨트롤러 안에 있는 매피 함수들의 URL이 공통이 있을때 클래스 위에 선언
                    @RequestMapping("/공통URL")

            - 2. xxxMapping
                Restful
                Restful api
                @PostMapping("URL")     : C 저장
                @GetMapping("URL")      : R 조회
                @PutMapping("URL")      : U 수정
                @DeleteMapping("URL")   : D 삭제

        * HTTP 응답
            1. @ResponseBody    : 응답(Response) Body(객체) : 응답 데이터를 객체로 하겠다
                String --> HTTP contentType --> text/plain
                그외 --> HTTP contentType --> application/json

HTTP 요청시 매개변수/데이터 를 보내는 방법
    < URL 경로 > POST , GET , PUT , DELETE
    1. 쿼리스티링 : url?key=value&key=value&key=value
        - 식별이 가능 , 많은 변수를 보낼때

        1. key 와 매핑함수의 매개변수명 통일
        2. @RequestParam("key") 매개변수
        3. @RequestParam Map<String , String > map
        4. Dto dto ( 단 : dto 안에 필드명이 key와 동일해야 한다 )

    2. 경로변수  : url/value1/value2
        - 식별이 불가능 , 주로 2 ~ 3 보낼때
        1. @PathVariable 매개변수
        2. @PathVariable("URL매개변수명") 매개변수

    - 사용자가 데이터를 쉽게 볼수 있다 < 보안 취약 >

    < http body > : http 안에 내용을 첨부할수 있는 보관소
        POST / PUT : body 사용 가능
            - 회원가입 , 로그인 , 글쓰기
        GET / DELETE : body 사용 안함
            - 글 전체 목록 , 글 개별 조회 , 글삭제

        contentType
            1. form ( ajax 기본형태 )
                쿼리스트링 과 동일
            2. application/json
                @RequestBody : JSON 타입 데이터를 JAVA 타입으로 자동 매핑

==========================================================================================================
MVC 패턴
                    view            model       DB
    클라이언트      controller
                    {jsp}
MVC 패턴2

    클라이언트       view        controller      model       DB

MVC 패턴2 3티어( 스프링 MVC 아키텍처 패턴 )

                                     톰캣 안에 있는 스프링 아키텍처 에 따른 클래스 들
                                -------------------------------------------------------------------------------------------------------------------------------
    클라이언트                         view                            controller                 service                  repository(dao)         DB
     브라우저                        resources                      @RestController              @Service                    @Repository
                Http                                                                                                        @Component

                                   static 정적(HTML,CSS,JS 등등)
                                   templates 동적(머스테치)

                                -------------------------------------------------------------------------------------------------------------------------------